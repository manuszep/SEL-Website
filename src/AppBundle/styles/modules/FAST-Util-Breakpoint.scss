/****************************************************************************
    FAST - Util Breakpoint
 ****************************************************************************/

/**
 *  Local variables
 **/
$FAST-Util-Breakpoint-list: (
        small: 0,
        medium: 640px,
        large: 1024px,
        xlarge: 1200px,
        xxlarge: 1440px,
) !default;

@if not map-has-key($FAST-Util-Breakpoint-list, small) or not map-has-key($FAST-Util-Breakpoint-list, medium) {
    @error 'Your list of breakpoints (defined in $FAST-Util-Breakpoint-list) must include one named "small" and one named "medium".';
}
@else if map-get($FAST-Util-Breakpoint-list, small) != 0 {
    @error 'Your "small" breakpoint (defined in $FAST-Util-Breakpoint-list) must be set to "0".';
}

$FAST-Util-Breakpoint-classes: (small medium large) !default;


/**
 *  Functions
 **/
// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to
// see what the possible inputs are.
//
// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.
@function FAST-breakpoint($val: small) {
    // Size or keyword
    $bp: nth($val, 1);
    // Value for max-width media queries
    $bp-max: 0;
    // Direction of media query (up, down, or only)
    $dir: if(length($val) > 1, nth($val, 2), up);
    // Eventual output
    $str: '';
    // Is it a named media query?
    $named: false;

    // Orientation media queries have a unique syntax
    @if $bp == 'landscape' or $bp == 'portrait' {
        @return '(orientation: #{$bp})';
    }
    @else if $bp == 'retina' {
        @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
    }

    // Try to pull a named breakpoint out of the $FAST-Util-Breakpoint-list map
    @if type-of($bp) == 'string' {
        @if map-has-key($FAST-Util-Breakpoint-list, $bp) {
            @if $dir == 'only' or $dir == 'down' {
                $bp-max: FAST-map-next($FAST-Util-Breakpoint-list, $bp);
            }

            $bp: map-get($FAST-Util-Breakpoint-list, $bp);
            $named: true;
        }
        @else {
            $bp: 0;
        }
    }

    // Convert any pixel, rem, or unitless value to em
    $bp: FAST-bp-to-em($bp);
    @if $bp-max {
        $bp-max: FAST-bp-to-em($bp-max) - (1/16);
    }

    // Conditions to skip media query creation
    // - It's a named breakpoint that resolved to "0 down" or "0 up"
    // - It's a numeric breakpoint that resolved to "0 " + anything
    @if $bp > 0em or $dir == 'only' or $dir == 'down' {
        // `only` ranges use the format `(min-width: n) and (max-width: n)`
        @if $dir == 'only' {
            // Only named media queries can have an "only" range
            @if $named == true {
                // Only use "min-width" if the floor is greater than 0
                @if $bp > 0em {
                    $str: $str + '(min-width: #{$bp})';

                    // Only add "and" to the media query if there's a ceiling
                    @if $bp-max != null {
                        $str: $str + ' and ';
                    }
                }

                // Only use "max-width" if there's a ceiling
                @if $bp-max != null {
                    $str: $str + '(max-width: #{$bp-max})';
                }
            }
            @else {
                @warn 'breakpoint(): Only named media queries can have an `only` range.';
            }
        }

            // `down` ranges use the format `(max-width: n)`
        @else if $dir == 'down' {
            $max: if($named, $bp-max, $bp);

            // Skip media query creation if input value is exactly "0 down",
            // unless the function was called as "small down", in which case it's just "small only"
            @if $named or $bp > 0em {
                @if $max != null {
                    $str: $str + '(max-width: #{$max})';
                }
            }
        }

            // `up` ranges use the format `(min-width: n)`
        @else if $bp > 0em {
            $str: $str + '(min-width: #{$bp})';
        }
    }

    @return $str;
}

// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped
// into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values
// from Sass to JavaScript, so they can be defined in one place.
// @access private
//
// @param {Map} $map - Map to convert.
//
// @returns {String} A string containing the map's contents.
@function FAST-bp-serialize($map) {
    $str: '';
    @each $key, $value in $map {
        $str: $str + $key + '=' + FAST-bp-to-em($value) + '&';
    }
    $str: str-slice($str, 1, -2);

    @return $str;
}

// Get a value for a breakpoint from a responsive config map. If the config map has the key `$value`, the exact
// breakpoint value is returned. If the config map does *not* have the breakpoint, the value matching the next lowest
// breakpoint in the config map is returned.
// @access private
//
// @param {Map} $map - Input config map.
// @param {Keyword} $value - Breakpoint name to use.
//
// @return {Mixed} The corresponding breakpoint value.
@function FAST-get-bp-val($map, $value) {
    // Check if the breakpoint name exists globally
    @if not map-has-key($FAST-Util-Breakpoint-list, $value) {
        @return null;
    }
        // Check if the breakpoint name exists in the local config map
    @else if map-has-key($map, $value) {
        // If it does, just return the value
        @return map-get($map, $value);
    }
        // Otherwise, find the next lowest breakpoint and return that value
    @else {
        $anchor: null;
        $found: false;

        @each $key, $val in $FAST-Util-Breakpoint-list {
            @if not $found {
                @if map-has-key($map, $key) {
                    $anchor: $key;
                }
                @if $key == $value {
                    $found: true;
                }
            }
        }

        @return map-get($map, $anchor);
    }
}


/**
 *  Mixins
 **/
// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:
//  - If a string is passed, the mixin will look for it in the `$FAST-Util-Breakpoint-list` map, and use a media query there.
//  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
//  - If a rem value is passed, the unit will be changed to em.
//  - If an em value is passed, the value will be used as-is.
//
// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.
//
// @output If the breakpoint is "0px and larger", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.
@mixin FAST-breakpoint($value) {
    $str: FAST-breakpoint($value);

    // If $str is still an empty string, no media query is needed
    @if $str == '' {
        @content;
    }

        // Otherwise, wrap the content in a media query
    @else {
        @media screen and #{$str} {
            @content;
        }
    }
}


/**
 *  Placeholders
 **/



/**
 *  Styles
 **/
